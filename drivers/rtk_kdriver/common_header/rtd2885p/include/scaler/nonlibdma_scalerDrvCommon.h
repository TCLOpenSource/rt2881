#ifndef _NONLIBDMA_COMMON_SCALERDRV_H__
#define _NONLIBDMA_COMMON_SCALERDRV_H__

#include <tvscalercontrol/scalerdrv/scalerdisplay.h>

#define MDOMAIN_10BITS	(10)
#define MDOMAIN_12BITS	(12)
#define MDOMAIN_16BITS	(16)
#define MDOMAIN_20BITS	(20)
#define MDOMAIN_24BITS	(24)
#define MDOMAIN_30BITS	(30)

#define FINAL_BURST_LENTH 1024//for boundary use. last burst avoid trash
#define M_DOMAIN_WIDTH_2K  (1920)
#define M_DOMAIN_LEN_2K   (1080)
#define M_DOMAIN_WIDTH_4K 	(3840)
#define M_DOMAIN_LEN_4K		(2160)

#define M_DOMAIN_WIDTH_BUSINESS_DISPLAY (2160)
#define M_DOMAIN_LEN_BUSINESS_DISPLAY (2160)

#define M_DOMAIN_WIDTH_MAX_SIZE  (_DISP_WID)//max input panel size
#define M_DOMAIN_LEN_MAX_SIZE   (_DISP_LEN)//max input panel size

#define M_DOMAIN_WIDTH_CARVEOUT  (2160)//kernel CARVEOUT size
#define M_DOMAIN_LEN_CARVEOUT    (2160)//kernel CARVEOUT size

#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define M_DOMAIN_WIDTH_CARVEOUT_4K	(M_DOMAIN_WIDTH_MAX_SIZE)
#define M_DOMAIN_LEN_CARVEOUT_4K	(M_DOMAIN_LEN_MAX_SIZE)
#define M_DOMAIN_WIDTH_CARVEOUT_2K	(M_DOMAIN_WIDTH_MAX_SIZE)
#define M_DOMAIN_LEN_CARVEOUT_2K	(M_DOMAIN_LEN_MAX_SIZE)
#else
#define M_DOMAIN_WIDTH_CARVEOUT_4K	(M_DOMAIN_WIDTH_4K)
#define M_DOMAIN_LEN_CARVEOUT_4K	(M_DOMAIN_LEN_4K)
#define M_DOMAIN_WIDTH_CARVEOUT_2K	(M_DOMAIN_WIDTH_2K)
#define M_DOMAIN_LEN_CARVEOUT_2K	(M_DOMAIN_LEN_2K)
#endif //CONFIG_RTK_KDRV_DV_IDK_DUMP

//Modify to use panel size define @Crixus 20170517
#define MDOMAIN_MAIN_SUB_BUFFER_SUM_SIZE (1024 * 1024 * 12)
#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define MDOMAIN_MAIN_BUFFER_SIZE_30BITS (M_DOMAIN_WIDTH_MAX_SIZE * M_DOMAIN_LEN_MAX_SIZE * 30 / 8  + FINAL_BURST_LENTH)
#else
#define MDOMAIN_MAIN_BUFFER_SIZE_30BITS (M_DOMAIN_WIDTH_CARVEOUT * M_DOMAIN_LEN_CARVEOUT * 30 / 8)
#define MDOMAIN_MAIN_BUFFER_SIZE_30BITS_4K (M_DOMAIN_WIDTH_MAX_SIZE * M_DOMAIN_LEN_MAX_SIZE * 30 / 8)
#endif

//#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS ((_DISP_WID * 12 + 256) / 128 * _DISP_LEN * 16)//Update M-domain 4k2k 12bits for PQDC align @Crixus 20170620
#ifdef CONFIG_BW_96B_ALIGNED
//	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS (drvif_memory_get_data_align((_DISP_WID * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * _DISP_LEN)//Update M-domain 4k2k 12bits for PQDC align @Crixus 20170620
#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_MAX_SIZE * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)//Update M-domain 2k1k 12bits for PQDC align
#else//#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_CARVEOUT * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_CARVEOUT + FINAL_BURST_LENTH)//Update M-domain 2k1k 12bits for PQDC align
#endif
	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS_4K (drvif_memory_get_data_align((M_DOMAIN_WIDTH_MAX_SIZE * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)//Update M-domain 2k1k 12bits for PQDC align
#else //#ifdef CONFIG_BW_96B_ALIGNED
	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS ((M_DOMAIN_WIDTH_CARVEOUT * 12 + 256) / 128 * M_DOMAIN_LEN_CARVEOUT * 16 + FINAL_BURST_LENTH)
	#define MDOMAIN_MAIN_BUFFER_SIZE_12BITS_4K ((M_DOMAIN_WIDTH_MAX_SIZE * 12 + 256) / 128 * M_DOMAIN_LEN_MAX_SIZE * 16 + FINAL_BURST_LENTH)
#endif

#define MDOMAIN_MAIN_BUFFER_SIZE_24BITS (M_DOMAIN_WIDTH_CARVEOUT * M_DOMAIN_LEN_CARVEOUT * 24 / 8 + FINAL_BURST_LENTH) //M-domain RGB444 mode
#ifdef CONFIG_BW_96B_ALIGNED
//#define MDOMAIN_MAIN_BUFFER_SIZE_20BITS (drvif_memory_get_data_align((_DISP_WID * 20 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * _DISP_LEN) //M-domain RGB444 mode 20bits
//#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS (drvif_memory_get_data_align((_DISP_WID * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * _DISP_LEN)//livezoomcase
#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define MDOMAIN_MAIN_BUFFER_SIZE_20BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_MAX_SIZE * 20 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH) //M-domain RGB444 mode 20bits
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_MAX_SIZE * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)//livezoomcase
#else
#define MDOMAIN_MAIN_BUFFER_SIZE_20BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_CARVEOUT * 20 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_CARVEOUT + FINAL_BURST_LENTH) //M-domain RGB444 mode 20bits
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_CARVEOUT * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_CARVEOUT + FINAL_BURST_LENTH)//livezoomcase
#endif
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_4K (drvif_memory_get_data_align((drvif_memory_get_data_align(M_DOMAIN_WIDTH_MAX_SIZE, 32) * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)//livezoomcase
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_4K120_CO_BUFFER (drvif_memory_get_data_align((drvif_memory_get_data_align(M_DOMAIN_WIDTH_MAX_SIZE, 32) * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + 2*FINAL_BURST_LENTH)//4k120 co buffer size
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_HDMI (drvif_memory_get_data_align((M_DOMAIN_WIDTH_CARVEOUT * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_CARVEOUT)//livezoomcase
#else //#ifdef CONFIG_BW_96B_ALIGNED
#define MDOMAIN_MAIN_BUFFER_SIZE_20BITS (((M_DOMAIN_WIDTH_CARVEOUT * 20 + 256) / 8) * M_DOMAIN_LEN_CARVEOUT + FINAL_BURST_LENTH) //M-domain RGB444 mode 20bits
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS (((M_DOMAIN_WIDTH_CARVEOUT * 16 + 256) / 8) * M_DOMAIN_LEN_CARVEOUT + FINAL_BURST_LENTH)//livezoomcase
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_4K (((drvif_memory_get_data_align(M_DOMAIN_WIDTH_MAX_SIZE, 32) * 16 + 256) / 8) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)//livezoomcase
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_4K120_CO_BUFFER (((drvif_memory_get_data_align(M_DOMAIN_WIDTH_MAX_SIZE, 32) * 16 + 256) / 8) * M_DOMAIN_LEN_MAX_SIZE + 2*FINAL_BURST_LENTH)//4k120 co buffer size
#define MDOMAIN_MAIN_BUFFER_SIZE_16BITS_HDMI (drvif_memory_get_data_align((M_DOMAIN_WIDTH_CARVEOUT * 16 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_CARVEOUT)//livezoomcase
#endif
#define MDOMAIN_MAIN_BUFFER_SIZE_10BITS ((M_DOMAIN_WIDTH_MAX_SIZE + (32 - (M_DOMAIN_WIDTH_MAX_SIZE % 32))) *  M_DOMAIN_LEN_CARVEOUT * 10 / 8 + CONFIG_MDOMAIN_BURST_SIZE + FINAL_BURST_LENTH)//all data fs flow
#ifdef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define MDOMAIN_MAIN_BUFFER_SIZE  MDOMAIN_MAIN_BUFFER_SIZE_16BITS//+0x40000//MDOMAIN_MAIN_BUFFER_SIZE_12BITS//(3840 * 2160 * 30 / 8) //4k2k 30 bits
#else
#define MDOMAIN_MAIN_BUFFER_SIZE  (MDOMAIN_MAIN_BUFFER_SIZE_16BITS+0x40000)//MDOMAIN_MAIN_BUFFER_SIZE_12BITS//(3840 * 2160 * 30 / 8) //4k2k 30 bits
#endif

//#define MDOMAIN_MAIN_BUFFER_SIZE_VO (_DISP_WID * _DISP_LEN * 20 / 8) //4k2k 16 bits for playback case
#ifdef CONFIG_BW_96B_ALIGNED
#define MDOMAIN_MAIN_BUFFER_SIZE_MULT2K_12BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_2K * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_2K + FINAL_BURST_LENTH)
#define MDOMAIN_MAIN_BUFFER_SIZE_MULT4K_12BITS (drvif_memory_get_data_align((M_DOMAIN_WIDTH_MAX_SIZE * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_MAX_SIZE + FINAL_BURST_LENTH)
#else
#define MDOMAIN_MAIN_BUFFER_SIZE_MULT2K_12BITS (M_DOMAIN_WIDTH_2K * M_DOMAIN_LEN_2K * 12 / 8 + FINAL_BURST_LENTH)
#define MDOMAIN_MAIN_BUFFER_SIZE_MULT4K_12BITS (M_DOMAIN_WIDTH_MAX_SIZE * M_DOMAIN_LEN_MAX_SIZE * 12 / 8 + FINAL_BURST_LENTH)
#endif

/* apvr and livezoom sub size*/
#define MDOMAIN_SUB_BUFFER_SIZE (drvif_memory_get_data_align((M_DOMAIN_WIDTH_2K * 12 + 256) / 8, DMA_SPEEDUP_ALIGN_VALUE) * M_DOMAIN_LEN_2K + FINAL_BURST_LENTH) //2k1k 12 bits

#define MDOMAIN_SUB_TWO_PIXEL_BUFFER_SIZE ((MDOMAIN_MAIN_BUFFER_SIZE_12BITS + FINAL_BURST_LENTH)/2 )
#define MDOMAIN_SUB_TWO_PIXEL_BUFFER_SIZE_PC_MODE ((MDOMAIN_MAIN_BUFFER_SIZE_16BITS + FINAL_BURST_LENTH)/2)
//I2rnd mcap2 memory size for PQC
#ifdef BRING_UP_I2RND
#define MDOMAIN_MAIN_I2R_BUFFER_SIZE ((((720 * 12) + 256) / 8) * 576)	//I2rnd bringup use 720*576 video to verify
#else
#define MDOMAIN_MAIN_I2R_BUFFER_SIZE ((1920 * 12 + 256) / 128 * 1080 * 16)
#endif

#endif
